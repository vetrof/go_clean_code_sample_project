package main

import (
	"log"
	"place_service/internal/place/handler"
	"place_service/internal/place/repository"
	"place_service/internal/place/router"
	"place_service/internal/place/service"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	log.Println("Starting Place Service...")

	// === –°–õ–û–ô –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í (DATA LAYER) ===
	// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
	nearbyRepo := repository.MokNearbyRepository()
	popularRepo := repository.NewPopularRepository()
	placeRepo := repository.NewPlaceRepository()
	log.Println("‚úì Repositories initialized")

	// === –°–õ–û–ô –°–ï–†–í–ò–°–û–í (BUSINESS LOGIC LAYER) ===
	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
	// –°–µ—Ä–≤–∏—Å—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
	nearbyService := service.NewNearbyService(nearbyRepo)
	popularService := service.NewPopularService(popularRepo)
	placeService := service.NewPlaceService(placeRepo)
	log.Println("‚úì Services initialized")

	// === –°–õ–û–ô –•–ï–ù–î–õ–ï–†–û–í (PRESENTATION LAYER) ===
	// –°–æ–∑–¥–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
	// –•–µ–Ω–¥–ª–µ—Ä—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
	nearbyHandler := handler.NewNearbyHandler(nearbyService)
	popularHandler := handler.NewPopularHandler(popularService)
	placeHandler := handler.NewPlaceHandler(placeService)
	log.Println("‚úì Handlers initialized")

	// === –°–õ–û–ô –†–û–£–¢–ï–†–ê (ROUTING LAYER) ===
	// –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
	appRouter := router.NewRouter(nearbyHandler, popularHandler, placeHandler)
	engine := appRouter.SetupRoutes()
	log.Println("‚úì Routes configured")

	// === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–¶–ò–ü–û–í –ß–ò–°–¢–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ===
	/*
		1. Dependency Inversion Principle (DIP):
		   - –°–µ—Ä–≤–∏—Å—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
		   - –•–µ–Ω–¥–ª–µ—Ä—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
		   - –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö

		2. Single Responsibility Principle (SRP):
		   - –ö–∞–∂–¥—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —Å–≤–æ—é —Å—É—â–Ω–æ—Å—Ç—å
		   - –ö–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏
		   - –ö–∞–∂–¥—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ HTTP –∑–∞–ø—Ä–æ—Å—ã

		3. Open/Closed Principle (OCP):
		   - –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, PostgreSQL)
		   - –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–æ–≤–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
		   - –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö endpoints

		4. Interface Segregation Principle (ISP):
		   - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã –∏ –Ω–µ–±–æ–ª—å—à–∏–µ
		   - NearbyService, PopularService, PlaceService - –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
		   - –ö–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã

		5. Liskov Substitution Principle (LSP):
		   - –õ—é–±–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥—É—é
		   - Mock —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
	*/

	// === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–°–¢–£–ü–ù–´–• ENDPOINTS ===
	log.Println("üöÄ Server starting on :8080")
	log.Println("üìö Available endpoints:")
	log.Println("  GET /api/v1/nearby?lat=55.7&lng=37.6  - –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç")
	log.Println("  GET /api/v1/popular                   - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞")
	log.Println("  GET /api/v1/places/:id                - –º–µ—Å—Ç–æ –ø–æ ID")
	log.Println("  GET /api/v1/places                    - –≤—Å–µ –º–µ—Å—Ç–∞")
	log.Println("  GET /api/v1/health                    - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞")
	log.Println("üìñ Backward compatibility endpoints:")
	log.Println("  GET /nearby?lat=55.7&lng=37.6         - –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç")
	log.Println("  GET /popular                          - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞")
	log.Println("  GET /health                           - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

	// === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –õ–ï–ì–ö–û–°–¢–ò –†–ê–°–®–ò–†–ï–ù–ò–Ø ===
	/*
		–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:

		1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:
		   - –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª review_repository.go
		   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ReviewRepository
		   - –î–æ–±–∞–≤–∏—Ç—å –≤ main.go: reviewRepo := repository.NewReviewRepository()

		2. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å:
		   - –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª review_service.go
		   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ReviewService
		   - –î–æ–±–∞–≤–∏—Ç—å –≤ main.go: reviewService := service.NewReviewService(reviewRepo)

		3. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä:
		   - –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª review_handler.go
		   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
		   - –î–æ–±–∞–≤–∏—Ç—å –≤ main.go: reviewHandler := handler.NewReviewHandler(reviewService)

		4. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:
		   - –û–±–Ω–æ–≤–∏—Ç—å router.go
		   - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ endpoints
	*/

	// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
	if err := engine.Run(":8080"); err != nil {
		log.Fatal("Failed to start server:", err)
	}
}
